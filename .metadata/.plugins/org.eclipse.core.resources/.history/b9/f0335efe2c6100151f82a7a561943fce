package customer;

import strategy.TimeTable;
import ticketBox.Platform;
import ticketBox.Row;
import ticketBox.RowForTicket;

public class Customer {

	public enum Status {notYet, onQue, onTicketing, onPlatform, onTrain, finished};
	
	//basic information
	int id ;
	String name ;
	int onTime ;
	int ticketingTime ;
	String depart ;
	String dest;
	Row location = null;
	
	//additional infomation
	Status status = Status.notYet;
	int waitingTime = 0;
	int tripTime = 0;
	int remainTrip;

	public Customer(int id, String name, int onTime, int ticketingTime, String depart, String dest ) {
		this.id = id;
		this.name = name;
		this.onTime = onTime;
		this.ticketingTime = ticketingTime;
		this.depart = depart;
		this.dest = dest;
		this.remainTrip = TimeTable.getTripTime(depart, dest);
	}
	
	public boolean isTicketed(){
		if(ticketingTime <= 0)
			return true;
		else
			return false;
	}
	
	public void timeSpend(){
		switch(status){
		case notYet:
			onTime--;
			break;
		case onQue:
			waitingTime++;
			break;
		case onTicketing:
			waitingTime++;
			ticketingTime--;
			break;
		case onPlatform:
			waitingTime++;
			break;
		case onTrain:
			tripTime++;
			remainTrip--;
			break;
		default:
			break;
		}
	}
	

	private void moveTo( Row row ) {
		if(location != null)
			location.remove(this);
		if(row !=null){
			location = row;
			location.add(this);
		}
	}
	
	public boolean gotoQue(RowForTicket row){
		if(status != Status.notYet && status != Status.onTicketing)
			return true; // wrong input;
		if(onTime >= 1)
			return true;
		status = Status.onQue;
		moveTo(row);
		System.out.println(name+" goes to row for ticket");
		return false;
	}
	

	public boolean gotoTicketer(){
		if(status != Status.onQue && status != Status.onTicketing)
			return true;
		status = Status.onTicketing;
		System.out.println(name+" meets a ticketer");
		return false;
	}
	
	public boolean gotoPlatform(Platform platform){
		if(status != Status.onTicketing)
			return true;
		status = Status.onPlatform;
		moveTo(platform);
		System.out.println(name+" goes to Platform");
		return false;
	}
	
	public boolean rideTrain(Row train){
		if(status != Status.onPlatform)
			return true;
		status = Status.onTrain;
		moveTo(train);
		System.out.println(name+" rides a train.");
		return false;
	}
	
	public boolean finish(){
		if(status != Status.onTrain)
			return true;
		status = Status.finished;
		System.out.println(name+" finnished. byebye~ "+"(Waiting time"+waitingTime+"Trip time:"+tripTime+")");
		return false;
	}
	
	public int getTotalTime(){
		return tripTime+waitingTime;
	}
	
	public String toString(){
		return "name:"+name+" 출발지:"+depart+" 도착지:"+dest+" 남은여행:"+remainTrip;
	}

	public void checkVaild() {
		if(this.status == Status.notYet){
			if(location != null)
				
		}else if(this.status == Status.onQue){
			
		}else if (this.status == Status.onTicketing){
			
		}else if(this.status == Status.onPlatform){
			
		}else if(this.status == Status.finished){
			
		}
			
		
	}
}
